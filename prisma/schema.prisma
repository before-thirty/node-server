// schema.prisma - Updated schema with content moderation and user blocking

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["multiSchema"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  schemas  = ["app_data"]
}

model User {
  id              String             @id @default(uuid())
  name            String
  email           String             @unique
  phoneNumber     String
  createdAt       DateTime           @default(now())
  updatedAt       DateTime           @updatedAt
  firebaseId      String
  isBlocked       Boolean            @default(false) // Global block status
  blockedAt       DateTime?          // When user was blocked
  blockReason     String?            // Reason for blocking
  Message         ChatMessage[]
  contents        Content[]
  tripUsers       TripUser[]
  ShareToken      ShareToken[]
  userPlaceMustDos UserPlaceMustDo[] // Fixed naming to be plural and consistent
  
  // Content and user reporting relations  
  reportedContent   ContentReport[]  @relation("ContentReporter")
  reportedUsers     UserReport[]     @relation("UserReporter") 
  userReports       UserReport[]     @relation("ReportedUser")
  
  // User blocking relations
  blockingUsers     UserBlock[]      @relation("BlockingUser")
  blockedByUsers    UserBlock[]      @relation("BlockedUser")
  
  // FCM tokens relation
  fcmTokens         FcmToken[]

  @@schema("app_data")
}

model Trip {
  id               String             @id @default(uuid())
  name             String
  startDate        DateTime
  endDate          DateTime
  description      String?
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  lastContentId    String?
  coverImage       String?
  isPublic         Boolean            @default(false)
  likes            Int?               @default(0)
  viewCount        Int?               @default(0)
  Message          ChatMessage[]
  contents         Content[]
  ShareToken       ShareToken[]
  last_content     Content?           @relation("LastContent", fields: [lastContentId], references: [id])
  tripUsers        TripUser[]
  userPlaceMustDos UserPlaceMustDo[]  // Added relation to must-do places in this trip

  @@schema("app_data")
}

model TripUser {
  id        String   @id @default(uuid())
  tripId    String
  userId    String
  role      String
  createdAt DateTime @default(now())
  trip      Trip     @relation(fields: [tripId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([tripId, userId])
  @@schema("app_data")
}

model Content {
  id                         String   @id @default(uuid())
  url                        String
  rawData                    String
  structuredData             String
  userId                     String
  tripId                     String
  createdAt                  DateTime @default(now())
  updatedAt                  DateTime @updatedAt
  userNotes                  String?
  pins_count                 Int      @default(0)
  thumbnail                  String   @default("")
  title                      String   @default("")
  
  // Content moderation fields
  isHidden                   Boolean  @default(false)  // Hidden due to reports
  hiddenAt                   DateTime?                 // When content was hidden
  hideReason                 String?                   // Reason for hiding
  
  // Embedding columns for semantic search
  title_embedding            Unsupported("vector(1536)")?
  raw_data_embedding         Unsupported("vector(1536)")?
  user_notes_embedding       Unsupported("vector(1536)")?
  structured_data_embedding  Unsupported("vector(1536)")?
  last_embedding_update      DateTime?
  
  trip                       Trip     @relation(fields: [tripId], references: [id], onDelete: Cascade)
  user                       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  pins                       Pin[]
  unusedTripsWithLastContent Trip[]   @relation("LastContent")
  contentReports             ContentReport[]

  @@schema("app_data")
}

model Pin {
  id           String      @id @default(uuid())
  name         String
  category     String
  description  String?
  contentId    String
  placeCacheId String?
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  content      Content     @relation(fields: [contentId], references: [id], onDelete: Cascade)
  placeCache   PlaceCache? @relation(fields: [placeCacheId], references: [id], onDelete: Cascade)

  @@schema("app_data")
}

model PlaceCache {
  id                  String             @id @default(uuid())
  placeId             String             @unique
  lat                 Float
  lng                 Float
  createdAt           DateTime           @default(now())
  lastCached          DateTime
  currentOpeningHours Json?
  name                String?
  rating              Float?
  regularOpeningHours Json?
  userRatingCount     Int?
  websiteUri          String?
  images              String[]
  pins                Pin[]
  utcOffsetMinutes    Int?
  userPlaceMustDos    UserPlaceMustDo[]  // Added relation to users who marked this place as must-do

  @@schema("app_data")
}

model ChatMessage {
  id        String   @id
  userId    String
  text      String
  createdAt DateTime @default(now())
  type      String   @default("text")
  fileUrl   String?
  fileName  String?
  tripId    String
  
  // Message moderation fields
  isHidden  Boolean  @default(false)
  hiddenAt  DateTime?
  hideReason String?
  
  trip      Trip     @relation(fields: [tripId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@schema("app_data")
}

model ShareToken {
  id        String   @id @default(uuid())
  token     String   @unique
  tripId    String
  createdBy String
  createdAt DateTime @default(now())
  expiresAt DateTime
  trip      Trip     @relation(fields: [tripId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [createdBy], references: [id], onDelete: Cascade)

  @@schema("app_data")
}

model UserPlaceMustDo {
  id           String     @id @default(uuid())
  userId       String
  placeCacheId String
  tripId       String
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  user         User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  placeCache   PlaceCache @relation(fields: [placeCacheId], references: [id], onDelete: Cascade)
  trip         Trip       @relation(fields: [tripId], references: [id], onDelete: Cascade)
  
  @@unique([userId, placeCacheId, tripId])
  @@schema("app_data")
}

// Content reporting system
model ContentReport {
  id          String              @id @default(uuid())
  contentId   String
  reportedBy  String
  reason      ContentReportReason
  description String?             // Additional details about the report
  status      ReportStatus        @default(PENDING)
  createdAt   DateTime            @default(now())
  reviewedAt  DateTime?
  reviewedBy  String?             // Admin who reviewed the report
  
  content     Content             @relation(fields: [contentId], references: [id], onDelete: Cascade)
  reporter    User                @relation("ContentReporter", fields: [reportedBy], references: [id])
  
  @@unique([contentId, reportedBy]) // Prevent duplicate reports from same user
  @@schema("app_data")
}

// User reporting system
model UserReport {
  id          String           @id @default(uuid())
  reportedUserId String
  reportedBy  String
  reason      UserReportReason
  description String?          // Additional details about the report
  status      ReportStatus     @default(PENDING)
  createdAt   DateTime         @default(now())
  reviewedAt  DateTime?
  reviewedBy  String?          // Admin who reviewed the report
  
  reportedUser User            @relation("ReportedUser", fields: [reportedUserId], references: [id])
  reporter     User            @relation("UserReporter", fields: [reportedBy], references: [id])
  
  @@unique([reportedUserId, reportedBy]) // Prevent duplicate reports from same user
  @@schema("app_data")
}

// User blocking system
model UserBlock {
  id          String   @id @default(uuid())
  blockingUserId String  // User who is doing the blocking
  blockedUserId  String  // User who is being blocked
  createdAt   DateTime @default(now())
  reason      String?  // Optional reason for blocking
  
  blockingUser User    @relation("BlockingUser", fields: [blockingUserId], references: [id], onDelete: Cascade)
  blockedUser  User    @relation("BlockedUser", fields: [blockedUserId], references: [id], onDelete: Cascade)
  
  @@unique([blockingUserId, blockedUserId]) // Prevent duplicate blocks
  @@schema("app_data")
}

// Enums for reporting reasons
enum ContentReportReason {
  SPAM
  INAPPROPRIATE_CONTENT
  HARASSMENT
  MISINFORMATION
  COPYRIGHT_VIOLATION
  VIOLENCE
  HATE_SPEECH
  ADULT_CONTENT
  OTHER
  
  @@schema("app_data")
}

enum UserReportReason {
  HARASSMENT
  SPAM
  INAPPROPRIATE_BEHAVIOR
  IMPERSONATION
  HATE_SPEECH
  THREATS
  SCAM
  OTHER
  
  @@schema("app_data")
}

enum ReportStatus {
  PENDING
  REVIEWED
  ACTIONED      // Content hidden or user blocked
  DISMISSED     // Report was reviewed but no action taken
  
  @@schema("app_data")
}

model FcmToken {
  id          String   @id @default(uuid())
  userId      String
  fcmToken    String   @unique
  deviceInfo  Json?    // Store device information like platform, version, etc.
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Indexes for performance
  @@index([userId])
  @@index([fcmToken])
  @@schema("app_data")
}