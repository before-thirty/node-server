// schema.prisma - Fixed schema with correct must-do implementation

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["multiSchema"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  schemas  = ["app_data"]
}

model User {
  id              String             @id @default(uuid())
  name            String
  email           String             @unique
  phoneNumber     String
  createdAt       DateTime           @default(now())
  updatedAt       DateTime           @updatedAt
  firebaseId      String
  Message         ChatMessage[]
  contents        Content[]
  tripUsers       TripUser[]
  ShareToken      ShareToken[]
  userPlaceMustDos UserPlaceMustDo[] // Fixed naming to be plural and consistent

  @@schema("app_data")
}

model Trip {
  id               String             @id @default(uuid())
  name             String
  startDate        DateTime
  endDate          DateTime
  description      String?
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  lastContentId    String?
  coverImage    String?
  isPublic      Boolean       @default(false)
  likes         Int?          @default(0)
  viewCount     Int?          @default(0)
  Message          ChatMessage[]
  contents         Content[]
  ShareToken       ShareToken[]
  last_content     Content?           @relation("LastContent", fields: [lastContentId], references: [id])
  tripUsers        TripUser[]
  userPlaceMustDos UserPlaceMustDo[]  // Added relation to must-do places in this trip

  @@schema("app_data")
}

model TripUser {
  id        String   @id @default(uuid())
  tripId    String
  userId    String
  role      String
  createdAt DateTime @default(now())
  trip      Trip     @relation(fields: [tripId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@unique([tripId, userId])
  @@schema("app_data")
}

model Content {
  id                         String   @id @default(uuid())
  url                        String
  rawData                    String
  structuredData             String
  userId                     String
  tripId                     String
  createdAt                  DateTime @default(now())
  updatedAt                  DateTime @updatedAt
  userNotes                  String?
  pins_count                 Int      @default(0)
  thumbnail                  String   @default("")
  title                      String   @default("")
  
  // Embedding columns for semantic search
  title_embedding            Unsupported("vector(1536)")?
  raw_data_embedding         Unsupported("vector(1536)")?
  user_notes_embedding       Unsupported("vector(1536)")?
  structured_data_embedding  Unsupported("vector(1536)")?
  last_embedding_update      DateTime?
  
  trip                       Trip     @relation(fields: [tripId], references: [id])
  user                       User     @relation(fields: [userId], references: [id])
  pins                       Pin[]
  unusedTripsWithLastContent Trip[]   @relation("LastContent")

  @@schema("app_data")
}

model Pin {
  id           String      @id @default(uuid())
  name         String
  category     String
  description  String?
  contentId    String
  placeCacheId String?
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  content      Content     @relation(fields: [contentId], references: [id])
  placeCache   PlaceCache? @relation(fields: [placeCacheId], references: [id])
  // Removed userPlaceMustDo relation from Pin since it should be on PlaceCache

  @@schema("app_data")
}

model PlaceCache {
  id                  String             @id @default(uuid())
  placeId             String             @unique
  lat                 Float
  lng                 Float
  createdAt           DateTime           @default(now())
  lastCached          DateTime
  currentOpeningHours Json?
  name                String?
  rating              Float?
  regularOpeningHours Json?
  userRatingCount     Int?
  websiteUri          String?
  images              String[]
  pins                Pin[]
  utcOffsetMinutes    Int?
  userPlaceMustDos    UserPlaceMustDo[]  // Added relation to users who marked this place as must-do

  @@schema("app_data")
}

model ChatMessage {
  id        String   @id
  userId    String
  text      String
  createdAt DateTime @default(now())
  type      String   @default("text")
  fileUrl   String?
  fileName  String?
  tripId    String
  trip      Trip     @relation(fields: [tripId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id])

  @@schema("app_data")
}

model ShareToken {
  id        String   @id @default(uuid())
  token     String   @unique
  tripId    String
  createdBy String
  createdAt DateTime @default(now())
  expiresAt DateTime
  trip      Trip     @relation(fields: [tripId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [createdBy], references: [id])

  @@schema("app_data")
}

// Fixed UserPlaceMustDo model - This is the core of our must-do functionality
model UserPlaceMustDo {
  id           String     @id @default(uuid())
  userId       String
  placeCacheId String
  tripId       String
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  user         User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  placeCache   PlaceCache @relation(fields: [placeCacheId], references: [id], onDelete: Cascade)
  trip         Trip       @relation(fields: [tripId], references: [id], onDelete: Cascade)
  
  @@unique([userId, placeCacheId, tripId])
  @@schema("app_data")
}