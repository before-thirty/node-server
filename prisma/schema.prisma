generator client {
  provider = "prisma-client-js"
  schema = "app_data"
}


datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL") // Load from .env
}


model User {
  id         String    @id @default(uuid())
  name       String
  email      String    @unique
  phoneNumber      String    @unique
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  tripUsers  TripUser[]
  contents   Content[] // Added this to relate to Content model
}

model Trip {
  id         String    @id @default(uuid())
  name       String
  startDate  DateTime
  endDate    DateTime
  description String?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  tripUsers  TripUser[]
  contents   Content[] // Added this to relate to Content model
}

model TripUser {
  id        String    @id @default(uuid())
  tripId    String
  userId    String
  role      String
  createdAt DateTime  @default(now())

  trip      Trip      @relation(fields: [tripId], references: [id])
  user      User      @relation(fields: [userId], references: [id])

  @@unique([tripId, userId]) // Prevent duplicate user-trip associations
}



model Content {
  id             String    @id @default(uuid())
  url            String
  rawData        String
  structuredData String
  userId         String
  tripId         String
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  user           User      @relation(fields: [userId], references: [id]) // Content belongs to one User
  trip           Trip      @relation(fields: [tripId], references: [id]) // Content belongs to one Trip
  pins           Pin[]     // List of Pins for this Content
}

model Pin {
  id            String    @id @default(uuid())
  name          String
  category      String
  description   String?
  contentId     String
  placeCacheId  String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  content       Content   @relation(fields: [contentId], references: [id]) // Pin belongs to one Content
  placeCache    PlaceCache? @relation(fields: [placeCacheId], references: [id]) // Pin belongs to optional PlaceCache
}

model PlaceCache {
  id                  String    @id @default(uuid())
  placeId             String    @unique
  name                String?
  rating             Float?   // Optional, as not all places have ratings
  userRatingCount    Int?     // Optional, for user rating count
  websiteUri         String?  // Optional, for the website URL
  currentOpeningHours Json?    // Optional, store as JSON if structure is complex
  regularOpeningHours Json?    // Optional, store as JSON for regular hours
  lat                 Float
  lng                 Float
  createdAt           DateTime  @default(now())
  lastCached          DateTime
  pins                Pin[]     // PlaceCache can have many Pins
}


