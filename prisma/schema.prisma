generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["multiSchema"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  schemas  = ["app_data"]
}

model User {
  id                  String            @id @default(uuid())
  name                String
  email               String            @unique
  phoneNumber         String
  createdAt           DateTime          @default(now())
  updatedAt           DateTime          @updatedAt
  firebaseId          String
  blockReason         String?
  blockedAt           DateTime?
  isBlocked           Boolean           @default(false)
  bucketListCountries String[]          @default([])
  metadata            Json?             @default("{}")
  lastOpened          DateTime?
  Message             ChatMessage[]
  contents            Content[]
  reportedContent     ContentReport[]   @relation("ContentReporter")
  fcmTokens           FcmToken[]
  ShareToken          ShareToken[]
  tripUsers           TripUser[]
  blockedByUsers      UserBlock[]       @relation("BlockedUser")
  blockingUsers       UserBlock[]       @relation("BlockingUser")
  userPlaceMustDos    UserPlaceMustDo[]
  reportedUsers       UserReport[]      @relation("UserReporter")
  userReports         UserReport[]      @relation("ReportedUser")

  @@schema("app_data")
}

model Trip {
  id               String            @id @default(uuid())
  name             String
  startDate        DateTime
  endDate          DateTime
  description      String?
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  lastContentId    String?
  coverImage       String?
  isPublic         Boolean           @default(false)
  likes            Int?              @default(0)
  viewCount        Int?              @default(0)
  metadata         Json?             @default("{}")
  Message          ChatMessage[]
  contents         Content[]
  ShareToken       ShareToken[]
  last_content     Content?          @relation("LastContent", fields: [lastContentId], references: [id])
  tripUsers        TripUser[]
  userPlaceMustDos UserPlaceMustDo[]

  @@schema("app_data")
}

model TripUser {
  id        String   @id @default(uuid())
  tripId    String
  userId    String
  role      String
  createdAt DateTime @default(now())
  trip      Trip     @relation(fields: [tripId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([tripId, userId])
  @@schema("app_data")
}

model Content {
  id                         String                 @id @default(uuid())
  url                        String
  rawData                    String
  structuredData             String
  userId                     String
  tripId                     String
  createdAt                  DateTime               @default(now())
  updatedAt                  DateTime               @updatedAt
  userNotes                  String?
  pins_count                 Int                    @default(0)
  thumbnail                  String                 @default("")
  title                      String                 @default("")
  last_embedding_update      DateTime?
  raw_data_embedding         Unsupported("vector")?
  structured_data_embedding  Unsupported("vector")?
  title_embedding            Unsupported("vector")?
  user_notes_embedding       Unsupported("vector")?
  hiddenAt                   DateTime?
  hideReason                 String?
  isHidden                   Boolean                @default(false)
  status                     ContentStatus          @default(PROCESSING)
  trip                       Trip                   @relation(fields: [tripId], references: [id], onDelete: Cascade)
  user                       User                   @relation(fields: [userId], references: [id], onDelete: Cascade)
  contentReports             ContentReport[]
  pins                       Pin[]
  unusedTripsWithLastContent Trip[]                 @relation("LastContent")

  @@schema("app_data")
}

model Pin {
  id           String      @id @default(uuid())
  name         String
  category     String
  description  String?
  contentId    String
  placeCacheId String?
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  content      Content     @relation(fields: [contentId], references: [id], onDelete: Cascade)
  placeCache   PlaceCache? @relation(fields: [placeCacheId], references: [id], onDelete: Cascade)

  @@schema("app_data")
}

model PlaceCache {
  id                  String            @id @default(uuid())
  placeId             String            @unique
  lat                 Float
  lng                 Float
  createdAt           DateTime          @default(now())
  lastCached          DateTime
  currentOpeningHours Json?
  name                String?
  rating              Float?
  regularOpeningHours Json?
  userRatingCount     Int?
  websiteUri          String?
  googleMapsLink      String?
  images              String[]
  utcOffsetMinutes    Int?
  googleMapsLink      String?
  pins                Pin[]
  userPlaceMustDos    UserPlaceMustDo[]

  @@schema("app_data")
}

model ChatMessage {
  id         String    @id
  userId     String
  text       String
  createdAt  DateTime  @default(now())
  type       String    @default("text")
  fileUrl    String?
  fileName   String?
  tripId     String
  hiddenAt   DateTime?
  hideReason String?
  isHidden   Boolean   @default(false)
  trip       Trip      @relation(fields: [tripId], references: [id], onDelete: Cascade)
  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@schema("app_data")
}

model ShareToken {
  id        String   @id @default(uuid())
  token     String   @unique
  tripId    String
  createdBy String
  createdAt DateTime @default(now())
  expiresAt DateTime
  user      User     @relation(fields: [createdBy], references: [id], onDelete: Cascade)
  trip      Trip     @relation(fields: [tripId], references: [id], onDelete: Cascade)

  @@schema("app_data")
}

model UserPlaceMustDo {
  id           String     @id @default(uuid())
  userId       String
  placeCacheId String
  tripId       String
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  placeCache   PlaceCache @relation(fields: [placeCacheId], references: [id], onDelete: Cascade)
  trip         Trip       @relation(fields: [tripId], references: [id], onDelete: Cascade)
  user         User       @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, placeCacheId, tripId])
  @@schema("app_data")
}

model ContentReport {
  id          String              @id @default(uuid())
  contentId   String
  reportedBy  String
  reason      ContentReportReason
  description String?
  status      ReportStatus        @default(PENDING)
  createdAt   DateTime            @default(now())
  reviewedAt  DateTime?
  reviewedBy  String?
  content     Content             @relation(fields: [contentId], references: [id], onDelete: Cascade)
  reporter    User                @relation("ContentReporter", fields: [reportedBy], references: [id])

  @@unique([contentId, reportedBy])
  @@schema("app_data")
}

model UserReport {
  id             String           @id @default(uuid())
  reportedUserId String
  reportedBy     String
  reason         UserReportReason
  description    String?
  status         ReportStatus     @default(PENDING)
  createdAt      DateTime         @default(now())
  reviewedAt     DateTime?
  reviewedBy     String?
  reporter       User             @relation("UserReporter", fields: [reportedBy], references: [id])
  reportedUser   User             @relation("ReportedUser", fields: [reportedUserId], references: [id])

  @@unique([reportedUserId, reportedBy])
  @@schema("app_data")
}

model UserBlock {
  id             String   @id @default(uuid())
  blockingUserId String
  blockedUserId  String
  createdAt      DateTime @default(now())
  reason         String?
  blockedUser    User     @relation("BlockedUser", fields: [blockedUserId], references: [id], onDelete: Cascade)
  blockingUser   User     @relation("BlockingUser", fields: [blockingUserId], references: [id], onDelete: Cascade)

  @@unique([blockingUserId, blockedUserId])
  @@schema("app_data")
}

model FcmToken {
  id         String   @id @default(uuid())
  userId     String
  fcmToken   String   @unique
  deviceInfo Json?
  isActive   Boolean  @default(true)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([fcmToken])
  @@schema("app_data")
}

model CountryDemoData {
  id          String   @id @default(uuid())
  countryName String   @unique
  countryId   String
  url         String
  demoData    Json
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  flag        String?
  lat         Float?
  lng         Float?

  @@schema("app_data")
}

enum ContentReportReason {
  SPAM
  INAPPROPRIATE_CONTENT
  HARASSMENT
  MISINFORMATION
  COPYRIGHT_VIOLATION
  VIOLENCE
  HATE_SPEECH
  ADULT_CONTENT
  OTHER

  @@schema("app_data")
}

enum UserReportReason {
  HARASSMENT
  SPAM
  INAPPROPRIATE_BEHAVIOR
  IMPERSONATION
  HATE_SPEECH
  THREATS
  SCAM
  OTHER

  @@schema("app_data")
}

enum ReportStatus {
  PENDING
  REVIEWED
  ACTIONED
  DISMISSED

  @@schema("app_data")
}

enum ContentStatus {
  PROCESSING
  COMPLETED
  FAILED

  @@schema("app_data")
}
