generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String        @id @default(uuid())
  name        String
  email       String        @unique
  phoneNumber String
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  firebaseId  String
  Message     ChatMessage[]
  contents    Content[]
  ShareToken  ShareToken[]
  tripUsers   TripUser[]
  ShareToken  ShareToken[]
}

model Trip {
  id            String        @id @default(uuid())
  name          String
  startDate     DateTime
  endDate       DateTime
  description   String?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  lastContentId String?
  Message       ChatMessage[]
  contents      Content[]
  ShareToken    ShareToken[]
  last_content  Content?      @relation("LastContent", fields: [lastContentId], references: [id])
  tripUsers     TripUser[]
  ShareToken  ShareToken[]
}

model TripUser {
  id        String   @id @default(uuid())
  tripId    String
  userId    String
  role      String
  createdAt DateTime @default(now())
  trip      Trip     @relation(fields: [tripId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@unique([tripId, userId])
}

model Content {
  id                         String   @id @default(uuid())
  url                        String
  rawData                    String
  structuredData             String
  userId                     String
  tripId                     String
  createdAt                  DateTime @default(now())
  updatedAt                  DateTime @updatedAt
  userNotes                  String?
  pins_count                 Int      @default(0)
  thumbnail                  String   @default("")
  title                    String   @default("")
  trip                       Trip     @relation(fields: [tripId], references: [id])
  user                       User     @relation(fields: [userId], references: [id])
  pins                       Pin[]
  unusedTripsWithLastContent Trip[]   @relation("LastContent")
}

model Pin {
  id           String      @id @default(uuid())
  name         String
  category     String
  description  String?
  contentId    String
  placeCacheId String?
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  content      Content     @relation(fields: [contentId], references: [id])
  placeCache   PlaceCache? @relation(fields: [placeCacheId], references: [id])
}

model PlaceCache {
  id                  String   @id @default(uuid())
  placeId             String   @unique
  lat                 Float
  lng                 Float
  createdAt           DateTime @default(now())
  lastCached          DateTime
  currentOpeningHours Json?
  name                String?
  rating              Float?
  regularOpeningHours Json?
  userRatingCount     Int?
  websiteUri          String?
  images              String[]
  pins                Pin[]
}

model ChatMessage {
  id        String   @id
  userId    String
  text      String
  createdAt DateTime @default(now())
  type      String   @default("text")
  fileUrl   String?
  fileName  String?
  tripId    String
  trip      Trip     @relation(fields: [tripId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id])
}

model ShareToken {
  id        String   @id @default(uuid())
  token     String   @unique
  tripId    String
  createdBy String
  createdAt DateTime @default(now())
  expiresAt DateTime
  trip      Trip     @relation(fields: [tripId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [createdBy], references: [id])
}
